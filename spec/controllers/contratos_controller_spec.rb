require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ContratosController do

  # This should return the minimal set of attributes required to create a valid
  # Contrato. As you add validations to Contrato, be sure to
  # update the return value of this method accordingly.

  include_context "it is nested in lote"

  def valid_attributes
    Factory.attributes_for(:contrato)
  end

  def create_valid_contrato
    @lote.create_contrato! valid_attributes
  end

  describe "GET index" do
    it "assigns all contratos as @contratos" do
      contrato = create_valid_contrato
      get :index
      assigns(:contratos).should eq([contrato])
    end
  end

  describe "GET show" do
    it "assigns the requested contrato as @contrato" do
      contrato = create_valid_contrato
      get :show, :lote_id => @lote.id.to_s
      assigns(:contrato).should eq(contrato)
    end

    it "assigna el lote correspondiente como @lote" do
      contrato = create_valid_contrato
      get :show, :lote_id => @lote.id.to_s
      assigns(:lote).should eq(@lote)
    end
  end

  describe "GET new" do
    it "assigns a new contrato as @contrato" do
      get :new, :lote_id => @lote.id.to_s
      assigns(:contrato).should be_a_new(Contrato)
    end

    it "@contrato pertenece a @lote" do
      get :new, :lote_id => @lote.id.to_s
      assigns(:contrato).lote.should == @lote
    end
  end

  describe "GET edit" do
    it "assigns the requested contrato as @contrato" do
      contrato = create_valid_contrato
      get :edit, :lote_id => @lote.id.to_s
      assigns(:contrato).should eq(contrato)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Contrato" do
        expect {
          post :create, :contrato => valid_attributes, :lote_id => @lote.id.to_s
        }.to change(Contrato, :count).by(1)
      end

      it "assigns a newly created contrato as @contrato" do
        post :create, :contrato => valid_attributes, :lote_id => @lote.id.to_s
        assigns(:contrato).should be_a(Contrato)
        assigns(:contrato).should be_persisted
      end

      it "redirects to the created contrato" do
        post :create, :contrato => valid_attributes, :lote_id => @lote.id.to_s
        response.should redirect_to(Contrato.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved contrato as @contrato" do
        # Trigger the behavior that occurs when invalid params are submitted
        Contrato.any_instance.stub(:save).and_return(false)
        post :create, :contrato => {}, :lote_id => @lote.id.to_s
        assigns(:contrato).should be_a_new(Contrato)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Contrato.any_instance.stub(:save).and_return(false)
        post :create, :contrato => {}, :lote_id => @lote.id.to_s
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested contrato" do
        contrato = create_valid_contrato
        # Assuming there are no other contratos in the database, this
        # specifies that the Contrato created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Contrato.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :contrato => {'these' => 'params'}, :lote_id => @lote.id.to_s
      end

      it "assigns the requested contrato as @contrato" do
        contrato = create_valid_contrato
        put :update, :contrato => valid_attributes, :lote_id => @lote.id.to_s
        assigns(:contrato).should eq(contrato)
      end

      it "redirects to the contrato" do
        contrato = create_valid_contrato
        put :update, :contrato => valid_attributes, :lote_id => @lote.id.to_s
        response.should redirect_to(contrato)
      end
    end

    describe "with invalid params" do
      it "assigns the contrato as @contrato" do
        contrato = create_valid_contrato
        # Trigger the behavior that occurs when invalid params are submitted
        Contrato.any_instance.stub(:save).and_return(false)
        put :update, :contrato => {}, :lote_id => @lote.id.to_s
        assigns(:contrato).should eq(contrato)
      end

      it "re-renders the 'edit' template" do
        contrato = create_valid_contrato
        # Trigger the behavior that occurs when invalid params are submitted
        Contrato.any_instance.stub(:save).and_return(false)
        put :update, :contrato => {}, :lote_id => @lote.id.to_s
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested contrato" do
      contrato = create_valid_contrato
      expect {
        delete :destroy, :lote_id => @lote.id.to_s
      }.to change(Contrato, :count).by(-1)
    end

    it "redirije a la vista de lote" do
      contrato = create_valid_contrato
      delete :destroy, :lote_id => @lote.id.to_s
      response.should redirect_to(@lote)
    end
  end

end
